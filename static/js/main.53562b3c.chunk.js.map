{"version":3,"sources":["components/Container/Container.js","components/Heading/Heading.js","utils/helpers.js","components/ContactForm/ContactForm.js","components/ContactList/ListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["Container","children","className","Heading","text","nameIdInput","shortid","generate","numberIdInput","ContactForm","state","name","number","handleSubmit","e","preventDefault","props","onSubmit","reset","handleChange","currentTarget","value","setState","this","inputChange","htmlFor","id","type","onChange","Component","ListItem","onDelete","onClick","ContactList","contacts","onDeleteContact","map","filterIdInput","Filter","onFilterChange","target","App","filter","addContact","find","contact","toast","error","newContact","formSubmitHandler","handleFilterChange","showContact","normalizedFilter","toLowerCase","includes","removeContact","contactId","prevState","parsedContacts","key","items","localStorage","getItem","JSON","parse","Error","getFromLS","prevProps","setItem","stringify","saveToLS","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53562b3c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Container.css';\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nContainer.propTypes = {\n    children: PropTypes.array,\n};\n\nexport default Container;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Heading.css';\n\nconst Heading = ({ text }) => {\n    return <h2 className=\"Heading\">{text}</h2>;\n};\n\nHeading.propTypes = {\n    text: PropTypes.string.isRequired,\n};\n\nexport default Heading;\n","import shortid from 'shortid';\n\nexport const saveToLS = (key, value) => {\n    try {\n        localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n        throw new Error();\n    }\n};\n\nexport const getFromLS = key => {\n    try {\n        const items = localStorage.getItem(key);\n        return items ? JSON.parse(items) : null;\n    } catch (error) {\n        throw new Error();\n    }\n};\n\nexport const nameIdInput = shortid.generate();\nexport const numberIdInput = shortid.generate();\n","import React, { Component } from 'react';\nimport { nameIdInput, numberIdInput } from '../../utils/helpers';\nimport './ContactForm.css';\n\nclass ContactForm extends Component {\n    state = {\n        name: '',\n        number: '',\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n\n        this.props.onSubmit(this.state);\n        this.reset();\n    };\n\n    handleChange = e => {\n        const { name, value } = e.currentTarget;\n\n        this.setState({\n            [name]: value,\n        });\n    };\n\n    reset = () => {\n        this.setState({\n            name: '',\n            number: '',\n        });\n    };\n\n    render() {\n        const { name, number } = this.state;\n        const inputChange = this.handleChange;\n\n        return (\n            <form className=\"Form\" onSubmit={this.handleSubmit}>\n                <label htmlFor={nameIdInput}>\n                    <p className=\"Label-text\">Name:</p>\n                    <input\n                        id={nameIdInput}\n                        className=\"Form-input\"\n                        type=\"text\"\n                        name=\"name\"\n                        value={name}\n                        onChange={inputChange}\n                    ></input>\n                </label>\n                <label htmlFor={numberIdInput}>\n                    <p className=\"Label-text\">Number:</p>\n                    <input\n                        id={numberIdInput}\n                        className=\"Form-input\"\n                        type=\"tel\"\n                        name=\"number\"\n                        value={number}\n                        onChange={inputChange}\n                    ></input>\n                </label>\n                <button className=\"Button\" type=\"submit\">\n                    Add contact\n                </button>\n            </form>\n        );\n    }\n}\n\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ListItem = ({ name, number, onDelete }) => {\n    return (\n        <li className=\"ListItem\">\n            <p className=\"ListItem-text\">\n                {name}:<span>{number}</span>\n            </p>\n\n            <button className=\"Button\" type=\"submit\" onClick={onDelete}>\n                Delete\n            </button>\n        </li>\n    );\n};\n\nListItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n};\n\nexport default ListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactList.css';\nimport ListItem from './ListItem';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n    return (\n        <ul className=\"ContactList\">\n            {contacts.map(({ id, name, number }) => (\n                <ListItem\n                    key={id}\n                    name={name}\n                    number={number}\n                    onDelete={() => onDeleteContact(id)}\n                />\n            ))}\n        </ul>\n    );\n};\n\nContactList.propTypes = {\n    contacts: PropTypes.oneOfType([\n        PropTypes.arrayOf(\n            PropTypes.shape({\n                id: PropTypes.string.isRequired,\n                name: PropTypes.string.isRequired,\n                number: PropTypes.string.isRequired,\n            }),\n        ),\n        PropTypes.array,\n    ]),\n};\n\nexport default ContactList;\n","import React from 'react';\nimport shortid from 'shortid';\nimport './Filter.css';\n\nconst filterIdInput = shortid.generate();\n\nconst Filter = ({ value, onFilterChange }) => {\n    return (\n        <div className=\"Filter\">\n            <label htmlFor={filterIdInput}>\n                <p className=\"Filter-text\">Find contacts by name</p>\n                <input\n                    id={filterIdInput}\n                    className=\"Filter-input\"\n                    type=\"text\"\n                    value={value}\n                    onChange={({ target: { value } }) => onFilterChange(value)}\n                />\n            </label>\n        </div>\n    );\n};\n\nexport default Filter;\n","import React, { Component } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport shortid from 'shortid';\nimport Container from './components/Container/Container';\nimport Heading from './components/Heading';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport { saveToLS, getFromLS } from './utils/helpers';\n\nclass App extends Component {\n    state = {\n        contacts: [],\n        filter: '',\n    };\n\n    addContact = (name, number) => {\n        const checkedForName = this.state.contacts.find(\n            contact => name === contact.name,\n        );\n\n        if (checkedForName) {\n            return toast.error(`${name} is already in contacts`);\n        }\n\n        const newContact = {\n            id: shortid.generate(),\n            name,\n            number,\n        };\n\n        if (!name || !number) {\n            toast.error('Invalid name or number value !');\n            return;\n        }\n\n        this.setState(({ contacts }) => ({\n            contacts: [...contacts, newContact],\n        }));\n    };\n\n    formSubmitHandler = ({ name, number }) => {\n        this.addContact(name, number);\n    };\n\n    handleFilterChange = filter => {\n        this.setState({ filter });\n    };\n\n    showContact = () => {\n        const { contacts, filter } = this.state;\n        const normalizedFilter = filter.toLowerCase();\n\n        return contacts.filter(({ name }) =>\n            name.toLowerCase().includes(normalizedFilter),\n        );\n    };\n\n    removeContact = contactId => {\n        this.setState(prevState => ({\n            contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n        }));\n    };\n\n    componentDidMount() {\n        const parsedContacts = getFromLS('contacts');\n\n        if (parsedContacts) {\n            this.setState({ contacts: parsedContacts });\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { contacts } = this.state;\n\n        if (contacts !== prevState.contacts) {\n            saveToLS('contacts', contacts);\n        }\n    }\n\n    render() {\n        const { contacts, filter } = this.state;\n\n        return (\n            <Container>\n                <Heading text=\"Phonebook\" />\n                <ContactForm onSubmit={this.formSubmitHandler} />\n                <ToastContainer />\n                <Heading text=\"Contacts\" />\n                {contacts.length >= 2 && (\n                    <Filter\n                        value={filter}\n                        onFilterChange={this.handleFilterChange}\n                    />\n                )}\n                {}\n                <ContactList\n                    contacts={this.showContact()}\n                    onDeleteContact={this.removeContact}\n                />\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}